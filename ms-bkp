#!/bin/bash

# Get the current date in format DD-MM-YYYY
NOW=$(date +"%d-%m-%Y")

# Function to export databases
function export_dbs() {
    local BACKUP_PATH="$1"
    local MYSQL_USER="$2"
    local MYSQL_PASSWORD="$3"

    # Exclude default databases
    IGNORE=("test" "information_schema" "mysql" "performance_schema" "sys")
    IGNORE_STR=$(printf "'%s'," "${IGNORE[@]}")
    IGNORE_STR=${IGNORE_STR%,}

    # Check and create the backup path
    if [[ -z "$BACKUP_PATH" ]]; then
        # Create the backup path in the Downloads folder based on the user's operating system
        BACKUP_PATH="$HOME/Downloads"
    fi

    # Create the path if it doesn't exist
    [ ! -d "$BACKUP_PATH" ] && mkdir -p "$BACKUP_PATH" || echo "$BACKUP_PATH exists"

    # Check if the path was created successfully
    if [[ ! -d "$BACKUP_PATH" ]]; then
        echo "Failed to create the backup path: $BACKUP_PATH"
        exit 1
    fi

    # Export databases
    databases=$(mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SHOW DATABASES;" --skip-column-names | grep -Ev "^($IGNORE_STR)$" | grep -Ev "performance_schema")
    for db in $databases; do
        compress_db "$BACKUP_PATH" "$db" "$MYSQL_USER" "$MYSQL_PASSWORD"
    done

    # Change permissions of the backup folder
    change_permissions "$BACKUP_PATH"

    # Open the backup folder
    open_bkp_dir "$BACKUP_PATH"
}

# Function to compress and timestamp the exported databases
function compress_db() {
    local backup_path="$1"
    local database="$2"
    local mysql_user="$3"
    local mysql_password="$4"

    local timestamp=$(date +"%H-%M-%S")
    local output_folder="$backup_path/MYSQL-BKP-$NOW"

    # Create the directory for the current database
    mkdir -p "$output_folder"

    local output_file="$output_folder/$database.sql.gz"

    mysqldump -u "$mysql_user" -p"$mysql_password" "$database" | gzip > "$output_file"

    echo "Backup created: $output_file"
}

# Function to change permissions of backup folder based on the user's operating system
function change_permissions() {
    local path="$1"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        chmod o+rwx "$path"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        chmod o+rwx "$path"
    elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin" ]]; then
        # Windows/MinGW/Cygwin
        icacls "$path" /grant:r "Everyone:(OI)(CI)(F)" > /dev/null 2>&1
    else
        echo "Changing permissions is not supported on your operating system."
    fi
}

# Function to open the backup folder based on the user's operating system
function open_bkp_dir() {
    local path="$1"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        xdg-open "$path"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        open "$path"
    elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin" ]]; then
        # Windows/MinGW/Cygwin
        explorer.exe "$path"
    else
        echo "Opening the backup folder is not supported on your operating system."
    fi
}

# Check if MySQL username and password were provided as arguments
if [[ $# -eq 3 ]]; then
    MYSQL_USER="$1"
    MYSQL_PASSWORD="$2"
    export_dbs "$3" "$MYSQL_USER" "$MYSQL_PASSWORD"
else
    # Prompt the user for MySQL credentials and export path
    echo "MySQL credentials required:"
    read -p "MySQL username: " MYSQL_USER
    read -s -p "MySQL password: " MYSQL_PASSWORD
    echo
    read -p "Export path (leave empty for default): " EXPORT_PATH

    export_dbs "$EXPORT_PATH" "$MYSQL_USER" "$MYSQL_PASSWORD"
fi