#!/bin/bash

# Get the current date in format DD-MM-YYYY
NOW=$(date +"%d-%m-%Y")

# Define default values
DEFAULT_BACKUP_PATH="$HOME/Downloads"
DEFAULT_ONLY_DB=""

# Function to export databases
function export_dbs() {
    local BACKUP_PATH="$1"
    local MYSQL_USER="$2"
    local MYSQL_PASSWORD="$3"

    # Exclude default databases
    IGNORE=("test" "information_schema" "mysql" "performance_schema" "sys")

    # TODO: fix multiple skip dbs not working like db1,db2 or db1, db2
    # Prompt the user for databases to skip
    read -p "Enter databases to skip (comma-separated): " SKIP_DATABASES
    read -ra SKIP_ARRAY <<< "$SKIP_DATABASES"
    IGNORE+=("${SKIP_ARRAY[@]}")

    # Check and create the backup path
    BACKUP_PATH=${BACKUP_PATH:-$DEFAULT_BACKUP_PATH}
    [ ! -d "$BACKUP_PATH" ] && mkdir -p "$BACKUP_PATH" || echo "$BACKUP_PATH exists"

    # Check if the path was created successfully
    if [[ ! -d "$BACKUP_PATH" ]]; then
        echo "Failed to create the backup path: $BACKUP_PATH"
        exit 1
    fi

    # Export databases
    if [ -n "$ONLY_DB" ]; then
        compress_db "$BACKUP_PATH" "$ONLY_DB" "$MYSQL_USER" "$MYSQL_PASSWORD"
    else
        databases=$(mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SHOW DATABASES;" --skip-column-names | grep -Ev "$(IFS="|"; echo "${IGNORE[*]}")")
        for db in $databases; do
            compress_db "$BACKUP_PATH" "$db" "$MYSQL_USER" "$MYSQL_PASSWORD"
        done
    fi

    # Change permissions of the backup folder
    change_permissions "$BACKUP_PATH"

    # Open the backup folder
    open_bkp_dir "$BACKUP_PATH"
}

# Function to compress and timestamp the exported databases
function compress_db() {
    local backup_path="$1"
    local database="$2"
    local mysql_user="$3"
    local mysql_password="$4"

    local timestamp=$(date +"%H-%M-%S")
    local output_folder="$backup_path/MYSQL-BKP-$NOW"

    # Create the directory for the current database
    mkdir -p "$output_folder"

    local output_file="$output_folder/$database.sql.gz"

    mysqldump -u "$mysql_user" -p"$mysql_password" "$database" | gzip > "$output_file"

    echo "Backup created: $output_file"
}

# Function to change permissions of backup folder based on the user's operating system
function change_permissions() {
    local path="$1"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        chmod o+rwx "$path"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        chmod o+rwx "$path"
    elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin" ]]; then
        # Windows/MinGW/Cygwin
        icacls "$path" /grant:r "Everyone:(OI)(CI)(F)" > /dev/null 2>&1
    else
        echo "Changing permissions is not supported on your operating system."
    fi
}

# Function to open the backup folder based on the user's operating system
function open_bkp_dir() {
    local path="$1"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        xdg-open "$path"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        open "$path"
    elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin" ]]; then
        # Windows/MinGW/Cygwin
        explorer.exe "$path"
    else
        echo "Opening the backup folder is not supported on your operating system."
    fi
}

# Function to display the help message
function display_help() {
    echo "Usage: $(basename "$0") [OPTIONS]
Options:
  -u, --user          MySQL username
  -p, --password      MySQL password
  -o, --only-db       Export only the specified database
  -d, --destination   Destination path for the backup (default: $DEFAULT_BACKUP_PATH)
  -h, --help          Display this help message"
}

# Parse the command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -u|--user)
            MYSQL_USER="$2"
            shift
            shift
            ;;
        -p|--password)
            MYSQL_PASSWORD="$2"
            shift
            shift
            ;;
        -o|--only-db)
            ONLY_DB="$2"
            shift
            shift
            ;;
        -d|--destination)
            DEFAULT_BACKUP_PATH="$2"
            shift
            shift
            ;;
        -h|--help)
            display_help
            exit 0
            ;;
        *)
            echo "Invalid option: $1"
            display_help
            exit 1
            ;;
    esac
done

# Check if MySQL username and password were provided as options
if [[ -n "$MYSQL_USER" && -n "$MYSQL_PASSWORD" ]]; then
    export_dbs "$DEFAULT_BACKUP_PATH" "$MYSQL_USER" "$MYSQL_PASSWORD"
else
    display_help
    exit 1
fi