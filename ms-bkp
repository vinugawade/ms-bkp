#!/bin/bash

# MySQL Database Backup Script

# Get the current date in format DD-MM-YYYY
NOW=$(date +"%d-%m-%Y")

# Define default values
DEFAULT_BACKUP_PATH="$HOME/Downloads"
DEFAULT_ONLY_DB=""
DEFAULT_SKIP_DB=""

# Function to export databases
function export_dbs() {
    local BACKUP_PATH="$1"
    local MYSQL_USER="$2"
    local MYSQL_PASSWORD="$3"
    local ONLY_DB="$4"
    local SKIP_DB="$5"

    # Exclude default databases
    IGNORE=("test" "information_schema" "mysql" "performance_schema" "sys")

    # Add user-provided databases to skip
    IFS=',' read -ra USER_SKIP_ARRAY <<< "$SKIP_DB"
    IGNORE+=("${USER_SKIP_ARRAY[@]}")

    # Use default values if not provided
    BACKUP_PATH=${BACKUP_PATH:-$DEFAULT_BACKUP_PATH}

    # Check and create the backup path
    [ ! -d "$BACKUP_PATH" ] && mkdir -p "$BACKUP_PATH" || echo "$BACKUP_PATH exists"

    # Check if the path was created successfully
    if [[ ! -d "$BACKUP_PATH" ]]; then
        echo "Error: Failed to create the backup path: $BACKUP_PATH"
        exit 1
    fi

    # Prompt the user for MySQL username and password if not provided as options
    if [ -z "$MYSQL_USER" ]; then
        read -p "Enter MySQL username: " MYSQL_USER
    fi

    if [ -z "$MYSQL_PASSWORD" ]; then
        read -s -p "Enter MySQL password: " MYSQL_PASSWORD
        echo
    fi

    # Check if MySQL connection is successful
    if ! mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SELECT 1;" > /dev/null 2>&1; then
        echo "Error: MySQL connection failed. Check your username and password."
        exit 1
    fi

    # Export databases
    if [ -n "$ONLY_DB" ]; then
        compress_db "$BACKUP_PATH" "$ONLY_DB" "$MYSQL_USER" "$MYSQL_PASSWORD"
    else
        databases=$(mysql -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SHOW DATABASES;" --skip-column-names | grep -Ev "$(IFS="|"; echo "${IGNORE[*]}")")
        while IFS= read -r db; do
            compress_db "$BACKUP_PATH" "$db" "$MYSQL_USER" "$MYSQL_PASSWORD"
        done <<< "$databases"
    fi

    # Change permissions of the backup folder
    change_permissions "$BACKUP_PATH"

    # Open the backup folder
    open_bkp_dir "$BACKUP_PATH"
}

# Function to compress and timestamp the exported databases
function compress_db() {
    local backup_path="$1"
    local database="$2"
    local mysql_user="$3"
    local mysql_password="$4"

    local timestamp=$(date +"%H-%M-%S")
    local output_folder="$backup_path/MYSQL-BKP-$NOW"

    # Create the directory for the current database
    mkdir -p "$output_folder"

    local output_file="$output_folder/$database.sql.gz"

    mysqldump -u "$mysql_user" -p"$mysql_password" "$database" | gzip > "$output_file"

    # Check if mysqldump was successful
    if [[ $? -eq 0 ]]; then
        echo "Backup created: $output_file"
    else
        echo "Error: Backup creation failed for database: $database"
    fi
}

# Function to change permissions of backup folder based on the user's operating system
function change_permissions() {
    local path="$1"

    if [[ "$OSTYPE" == "linux-gnu"* || "$OSTYPE" == "darwin"* ]]; then
        # Linux or macOS
        chmod o+rwx "$path"
    elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin" ]]; then
        # Windows/MinGW/Cygwin
        icacls "$path" /grant:r "Everyone:(OI)(CI)(F)" > /dev/null 2>&1
    else
        echo "Changing permissions is not supported on your operating system."
    fi
}

# Function to open the backup folder based on the user's operating system
function open_bkp_dir() {
    local path="$1"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        xdg-open "$path"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        open "$path"
    elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin" ]]; then
        # Windows/MinGW/Cygwin
        explorer.exe "$path"
    else
        echo "Opening the backup folder is not supported on your operating system."
    fi
}

# Function to display the help message
function display_help() {
    echo "Usage: $(basename "$0") [OPTIONS]
Options:
  -u, --user      MySQL username
  -p, --password  MySQL password
  -o, --only      Export only the specified database
  -s, --skip      Skip specified databases during export (comma-separated)
  -d, --dest      Destination path for the backup (default: $DEFAULT_BACKUP_PATH)
  -h, --help      Display this help message"
}

# Parse the command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -u|--user)
            MYSQL_USER="$2"
            shift
            shift
            ;;
        -p|--password)
            MYSQL_PASSWORD="$2"
            shift
            shift
            ;;
        -o|--only)
            ONLY_DB="$2"
            shift
            shift
            ;;
        -s|--skip)
            SKIP_DB="$2"
            shift
            shift
            ;;
        -d|--dest)
            DESTINATION_PATH="$2"
            shift
            shift
            ;;
        -h|--help)
            display_help
            exit 0
            ;;
        *)
            echo "Error: Invalid option: $1"
            display_help
            exit 1
            ;;
    esac
done

# If MySQL username and password are not provided as options, prompt the user
if [ -z "$MYSQL_USER" ]; then
    read -p "Enter MySQL username: " MYSQL_USER
fi

if [ -z "$MYSQL_PASSWORD" ]; then
    read -s -p "Enter MySQL password: " MYSQL_PASSWORD
    echo
fi

# Check if destination path is not provided as an option, prompt the user
if [ -z "$DESTINATION_PATH" ]; then
    read -p "Enter destination path for the backup (default: $DEFAULT_BACKUP_PATH): " DESTINATION_PATH
    DESTINATION_PATH=${DESTINATION_PATH:-$DEFAULT_BACKUP_PATH}
fi

# Check if the destination path is created successfully
[ ! -d "$DESTINATION_PATH" ] && mkdir -p "$DESTINATION_PATH"

# Check if the path was created successfully
if [[ ! -d "$DESTINATION_PATH" ]]; then
    echo "Error: Failed to create the backup path: $DESTINATION_PATH"
    exit 1
fi

# If -o option is provided, set ONLY_DB to the provided value
if [ -n "$ONLY_DB" ]; then
    SKIP_DB_PROVIDED=true
fi

# If -s option is provided, set SKIP_DB to the provided value
if [ -n "$SKIP_DB" ]; then
    ONLY_DB_PROVIDED=true
fi

# Check if skip db input is required
if [ -z "$SKIP_DB" ] && [ "$SKIP_DB_PROVIDED" != true ]; then
    read -p "Enter databases to skip (comma-separated): " SKIP_DB
fi

# Call the export function with provided or prompted values
export_dbs "$DESTINATION_PATH" "$MYSQL_USER" "$MYSQL_PASSWORD" "$ONLY_DB" "$SKIP_DB"
